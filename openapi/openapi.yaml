openapi: 3.1.0
info:
  version: 1.0.0
  title: Quotation Engine Api
  # termsOfService: https://example.com/terms/
  # contact:
  #   email: contact@example.com
  #   url: http://example.com/contact
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://apiportaluat.tuneprotect.com/apidocs/d2c/images/general-68af2602.png
  description: >
    This is an **example** API to demonstrate features of the OpenAPI
    specification.

    # Introduction

    Welcome to the brief **Quotation Engine Api** integration guide, designed to help you set up the offering our products on your platform.


    Our integrations team are at hand to support you along the way.

    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities
    of the service without access to source
    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: Echo
    description: Example echo operations.
  - name: User
    description: Operations about users.
  - name: Tag
    description: This is a tag description.
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
paths:
  /users/{username}:
    $ref: paths/users_{username}.yaml
  /echo:
    $ref: paths/echo.yaml
  /pathItem:
    $ref: paths/pathItem.yaml
  /pathItemWithExamples:
    $ref: paths/pathItemWithExamples.yaml
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
